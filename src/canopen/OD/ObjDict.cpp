
/* File generated by gen_cfile.py. Should not be modified. */

#include "ObjDict.h"
// d
/**************************************************************************/
/* Declaration of mapped variables                                        */
/**************************************************************************/
UNS8 RX[] =		/* Mapped at index 0x2000, subindex 0x01 - 0x08 */
  {
    0x0,	/* 0 */
    0x0,	/* 0 */
    0x0,	/* 0 */
    0x0,	/* 0 */
    0x0,	/* 0 */
    0x0,	/* 0 */
    0x0,	/* 0 */
    0x0	/* 0 */
  };
UNS8 TX[] =		/* Mapped at index 0x2200, subindex 0x01 - 0x02 */
  {
    0x0,	/* 0 */
    0x0	/* 0 */
  };

/**************************************************************************/
/* Declaration of value range types                                       */
/**************************************************************************/

#define valueRange_EMC 0x9F /* Type for index 0x1003 subindex 0x00 (only set of value 0 is possible) */
UNS32 UAECAB_valueRangeTest (UNS8 typeValue, void * value)
{
  switch (typeValue) {
    case valueRange_EMC:
      if (*(UNS8*)value != (UNS8)0) return OD_VALUE_RANGE_EXCEEDED;
      break;
  }
  return 0;
}

/**************************************************************************/
/* The node id                                                            */
/**************************************************************************/
/* node_id default value.*/
UNS8 UAECAB_bDeviceNodeId = 0x00;

/**************************************************************************/
/* Array of message processing information */

const UNS8 UAECAB_iam_a_slave = 0;

TIMER_HANDLE UAECAB_heartBeatTimers[1] = {TIMER_NONE};

/*
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

                               OBJECT DICTIONARY

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
*/

/* index 0x1000 :   Device Type. */
                    UNS32 UAECAB_obj1000 = 0x0;	/* 0 */
                    subindex UAECAB_Index1000[] = 
                     {
                       { RO, uint32, sizeof (UNS32), (void*)&UAECAB_obj1000 }
                     };

/* index 0x1001 :   Error Register. */
                    UNS8 UAECAB_obj1001 = 0x0;	/* 0 */
                    subindex UAECAB_Index1001[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_obj1001 }
                     };

/* index 0x1003 :   Pre-defined Error Field */
                    UNS8 UAECAB_highestSubIndex_obj1003 = 0; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1003[] = 
                    {
                      0x0	/* 0 */
                    };
                    ODCallback_t UAECAB_Index1003_callbacks[] = 
                     {
                       NULL,
                       NULL,
                     };
                    subindex UAECAB_Index1003[] = 
                     {
                       { RW, valueRange_EMC, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1003 },
                       { RO, uint32, sizeof (UNS32), (void*)&UAECAB_obj1003[0] }
                     };

/* index 0x1005 :   SYNC COB ID. */
                    UNS32 UAECAB_obj1005 = 0x80;	/* 128 */
                    ODCallback_t UAECAB_Index1005_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex UAECAB_Index1005[] = 
                     {
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1005 }
                     };

/* index 0x1006 :   Communication / Cycle Period. */
                    UNS32 UAECAB_obj1006 = 0x64;	/* 100 */
                    ODCallback_t UAECAB_Index1006_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex UAECAB_Index1006[] = 
                     {
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1006 }
                     };

/* index 0x1007 :   Synchronous Window Length. */
                    UNS32 UAECAB_obj1007 = 0x0;	/* 0 */
                    subindex UAECAB_Index1007[] = 
                     {
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1007 }
                     };

/* index 0x100C :   Guard Time */ 
                    UNS16 UAECAB_obj100C = 0x0;   /* 0 */

/* index 0x100D :   Life Time Factor */ 
                    UNS8 UAECAB_obj100D = 0x0;   /* 0 */

/* index 0x1014 :   Emergency COB ID */
                    UNS32 UAECAB_obj1014 = 0x80 + 0x00;   /* 128 + NodeID */

/* index 0x1016 :   Consumer Heartbeat Time. */
                    UNS8 UAECAB_highestSubIndex_obj1016 = 1; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1016[] = 
                    {
                      0x1607D0	/* 2000 *//* 其中高16位为从机的ID号，低16位位检测时间7D0的时间就是2秒*/		
                    };
                    subindex UAECAB_Index1016[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1016},
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1016[0]}
                     };

/* index 0x1017 :   Producer Heartbeat Time. */
                    UNS16 UAECAB_obj1017 = 0x64;	/* 100 */
                    ODCallback_t UAECAB_Index1017_callbacks[] = 
                     {
                       NULL,
                     };
                    subindex UAECAB_Index1017[] = 
                     {
                       { RW, uint16, sizeof (UNS16), (void*)&UAECAB_obj1017 }
                     };

/* index 0x1018 :   Identity. */
                    UNS8 UAECAB_highestSubIndex_obj1018 = 4; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1018_Vendor_ID = 0x0;	/* 0 */
                    UNS32 UAECAB_obj1018_Product_Code = 0x0;	/* 0 */
                    UNS32 UAECAB_obj1018_Revision_Number = 0x0;	/* 0 */
                    UNS32 UAECAB_obj1018_Serial_Number = 0x0;	/* 0 */
                    subindex UAECAB_Index1018[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1018 },
                       { RO, uint32, sizeof (UNS32), (void*)&UAECAB_obj1018_Vendor_ID },
                       { RO, uint32, sizeof (UNS32), (void*)&UAECAB_obj1018_Product_Code },
                       { RO, uint32, sizeof (UNS32), (void*)&UAECAB_obj1018_Revision_Number },
                       { RO, uint32, sizeof (UNS32), (void*)&UAECAB_obj1018_Serial_Number }
                     };

/* index 0x1400 :   Receive PDO 1 Parameter. */
                    UNS8 UAECAB_highestSubIndex_obj1400 = 6; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1400_COB_ID_used_by_PDO = 0x1D5;	/* 512 */
                    UNS8 UAECAB_obj1400_Transmission_Type = 0xFE;	/* 254 */
                    UNS16 UAECAB_obj1400_Inhibit_Time = 0x0;	/* 0 */
                    UNS8 UAECAB_obj1400_Compatibility_Entry = 0x0;	/* 0 */
                    UNS16 UAECAB_obj1400_Event_Timer = 0x0;	/* 0 */
                    UNS8 UAECAB_obj1400_SYNC_start_value = 0x80;	/* 128 */
                    subindex UAECAB_Index1400[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1400 },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1400_COB_ID_used_by_PDO },
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_obj1400_Transmission_Type },
                       { RW, uint16, sizeof (UNS16), (void*)&UAECAB_obj1400_Inhibit_Time },
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_obj1400_Compatibility_Entry },
                       { RW, uint16, sizeof (UNS16), (void*)&UAECAB_obj1400_Event_Timer },
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_obj1400_SYNC_start_value }
                     };

/* index 0x1600 :   Receive PDO 1 Mapping. */
                    UNS8 UAECAB_highestSubIndex_obj1600 = 8; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1600[] = 
                    {
                      0x20000108,	/* 536871176 */
                      0x20000208,	/* 536871432 */
                      0x20000308,	/* 536871688 */
                      0x20000408,	/* 536871944 */
                      0x20000508,	/* 536872200 */
                      0x20000608,	/* 536872456 */
                      0x20000708,	/* 536872712 */
                      0x20000808	/* 536872968 */
                    };
                    subindex UAECAB_Index1600[] = 
                     {
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1600 },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[0] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[1] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[2] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[3] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[4] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[5] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[6] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1600[7] }
                     };

/* index 0x1800 :   Transmit PDO 1 Parameter. */
                    UNS8 UAECAB_highestSubIndex_obj1800 = 6; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1800_COB_ID_used_by_PDO = 0x236;	/* 384 */
                    UNS8 UAECAB_obj1800_Transmission_Type = 0xFE;	/* 254 */
                    UNS16 UAECAB_obj1800_Inhibit_Time = 0x0;	/* 0 */
                    UNS8 UAECAB_obj1800_Compatibility_Entry = 0x0;	/* 0 */
                    UNS16 UAECAB_obj1800_Event_Timer = 0x64;	/* 100 */
                    UNS8 UAECAB_obj1800_SYNC_start_value = 0x0;	/* 0 */
                    ODCallback_t UAECAB_Index1800_callbacks[] = 
                     {
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                     };
                    subindex UAECAB_Index1800[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1800 },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1800_COB_ID_used_by_PDO },
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_obj1800_Transmission_Type },
                       { RW, uint16, sizeof (UNS16), (void*)&UAECAB_obj1800_Inhibit_Time },
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_obj1800_Compatibility_Entry },
                       { RW, uint16, sizeof (UNS16), (void*)&UAECAB_obj1800_Event_Timer },
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_obj1800_SYNC_start_value }
                     };

/* index 0x1A00 :   Transmit PDO 1 Mapping. */
                    UNS8 UAECAB_highestSubIndex_obj1A00 = 2; /* number of subindex - 1*/
                    UNS32 UAECAB_obj1A00[] = 
                    {
                      0x22000108,	/* 570425608 */
                      0x22000208	/* 570425864 */
                    };
                    ODCallback_t UAECAB_Index1A00_callbacks[] = 
                     {
                       NULL,
                       NULL,
                       NULL,
                     };
                    subindex UAECAB_Index1A00[] = 
                     {
                       { RW, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj1A00 },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1A00[0] },
                       { RW, uint32, sizeof (UNS32), (void*)&UAECAB_obj1A00[1] }
                     };

/* index 0x2000 :   Mapped variable RX */
                    UNS8 UAECAB_highestSubIndex_obj2000 = 8; /* number of subindex - 1*/
                    subindex UAECAB_Index2000[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj2000 },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[0] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[1] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[2] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[3] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[4] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[5] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[6] },
                       { RW, uint8, sizeof (UNS8), (void*)&RX[7] }
                     };

/* index 0x2200 :   Mapped variable TX */
                    UNS8 UAECAB_highestSubIndex_obj2200 = 2; /* number of subindex - 1*/
                    subindex UAECAB_Index2200[] = 
                     {
                       { RO, uint8, sizeof (UNS8), (void*)&UAECAB_highestSubIndex_obj2200 },
                       { RW, uint8, sizeof (UNS8), (void*)&TX[0] },
                       { RW, uint8, sizeof (UNS8), (void*)&TX[1] }
                     };

/**************************************************************************/
/* Declaration of pointed variables                                       */
/**************************************************************************/

const indextable UAECAB_objdict[] = 
{
  { (subindex*)UAECAB_Index1000,sizeof(UAECAB_Index1000)/sizeof(UAECAB_Index1000[0]), 0x1000},
  { (subindex*)UAECAB_Index1001,sizeof(UAECAB_Index1001)/sizeof(UAECAB_Index1001[0]), 0x1001},
  { (subindex*)UAECAB_Index1005,sizeof(UAECAB_Index1005)/sizeof(UAECAB_Index1005[0]), 0x1005},
  { (subindex*)UAECAB_Index1006,sizeof(UAECAB_Index1006)/sizeof(UAECAB_Index1006[0]), 0x1006},
  { (subindex*)UAECAB_Index1007,sizeof(UAECAB_Index1007)/sizeof(UAECAB_Index1007[0]), 0x1007},
  { (subindex*)UAECAB_Index1016,sizeof(UAECAB_Index1016)/sizeof(UAECAB_Index1016[0]), 0x1016},
  { (subindex*)UAECAB_Index1017,sizeof(UAECAB_Index1017)/sizeof(UAECAB_Index1017[0]), 0x1017},
  { (subindex*)UAECAB_Index1018,sizeof(UAECAB_Index1018)/sizeof(UAECAB_Index1018[0]), 0x1018},
  { (subindex*)UAECAB_Index1400,sizeof(UAECAB_Index1400)/sizeof(UAECAB_Index1400[0]), 0x1400},
  { (subindex*)UAECAB_Index1600,sizeof(UAECAB_Index1600)/sizeof(UAECAB_Index1600[0]), 0x1600},
  { (subindex*)UAECAB_Index1800,sizeof(UAECAB_Index1800)/sizeof(UAECAB_Index1800[0]), 0x1800},
  { (subindex*)UAECAB_Index1A00,sizeof(UAECAB_Index1A00)/sizeof(UAECAB_Index1A00[0]), 0x1A00},
  { (subindex*)UAECAB_Index2000,sizeof(UAECAB_Index2000)/sizeof(UAECAB_Index2000[0]), 0x2000},
  { (subindex*)UAECAB_Index2200,sizeof(UAECAB_Index2200)/sizeof(UAECAB_Index2200[0]), 0x2200},
};

const indextable * UAECAB_scanIndexOD (UNS16 wIndex, UNS32 * errorCode, ODCallback_t **callbacks)
{
	int i;
	*callbacks = NULL;
	switch(wIndex){
		case 0x1000: i = 0;break;
		case 0x1001: i = 1;break;
		case 0x1005: i = 2;*callbacks = UAECAB_Index1005_callbacks; break;
		case 0x1006: i = 3;*callbacks = UAECAB_Index1006_callbacks; break;
		case 0x1007: i = 4;break;
		case 0x1016: i = 5;break;
		case 0x1017: i = 6;*callbacks = UAECAB_Index1017_callbacks; break;
		case 0x1018: i = 7;break;
		case 0x1400: i = 8;break;
		case 0x1600: i = 9;break;
		case 0x1800: i = 10;*callbacks = UAECAB_Index1800_callbacks; break;
		case 0x1A00: i = 11;*callbacks = UAECAB_Index1A00_callbacks; break;
		case 0x2000: i = 12;break;
		case 0x2200: i = 13;break;
		default:
			*errorCode = OD_NO_SUCH_OBJECT;
			return NULL;
	}
	*errorCode = OD_SUCCESSFUL;
	return &UAECAB_objdict[i];
}

/* 
 * To count at which received SYNC a PDO must be sent.
 * Even if no pdoTransmit are defined, at least one entry is computed
 * for compilations issues.
 */
s_PDO_status UAECAB_PDO_status[1] = {s_PDO_status_Initializer};

const quick_index UAECAB_firstIndex = {
  0, /* SDO_SVR */
  0, /* SDO_CLT */
  8, /* PDO_RCV */
  9, /* PDO_RCV_MAP */
  10, /* PDO_TRS */
  11 /* PDO_TRS_MAP */
};

const quick_index UAECAB_lastIndex = {
  0, /* SDO_SVR */
  0, /* SDO_CLT */
  8, /* PDO_RCV */
  9, /* PDO_RCV_MAP */
  10, /* PDO_TRS */
  11 /* PDO_TRS_MAP */
};

const UNS16 UAECAB_ObjdictSize = sizeof(UAECAB_objdict)/sizeof(UAECAB_objdict[0]); 

CO_Data UAECAB_Data = CANOPEN_NODE_DATA_INITIALIZER(UAECAB);

